// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc841.Waffle.subsystems;

import org.usfirst.frc841.Waffle.RobotMap;
import org.usfirst.frc841.Waffle.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftDriveTrain1 = RobotMap.driveTrainLeftDriveTrain1;
    private final SpeedController leftDriveTrain2 = RobotMap.driveTrainLeftDriveTrain2;
    private final SpeedController rightDriveTrain1 = RobotMap.driveTrainRightDriveTrain1;
    private final SpeedController rightDriveTrain2 = RobotMap.driveTrainRightDriveTrain2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void tankDrive(Joystick stick) {
		double axisNonLinearity;
		// Get Y axis and make a Deadband
		double leftY = handleDeadband(getYAxisLeftSide(stick), 0.02);
		double rightY = handleDeadband(getYAxisRightSide(stick), 0.02);
/*
		if (isHighGear) {
			axisNonLinearity = 0.5;
			// Smooth the controls on Left side
			leftY = Math.sin(Math.PI / 2.0 * axisNonLinearity * leftY) / Math.sin(Math.PI / 2.0 * axisNonLinearity);
			leftY = Math.sin(Math.PI / 2.0 * axisNonLinearity * leftY) / Math.sin(Math.PI / 2.0 * axisNonLinearity);

			// Smooth the controls on Right side
			rightY = Math.sin(Math.PI / 2.0 * axisNonLinearity * rightY) / Math.sin(Math.PI / 2.0 * axisNonLinearity);
			rightY = Math.sin(Math.PI / 2.0 * axisNonLinearity * rightY) / Math.sin(Math.PI / 2.0 * axisNonLinearity);
		} else {
			axisNonLinearity = 0.5;
			// Smooth the controls on Left side
			leftY = Math.sin(Math.PI / 2.0 * axisNonLinearity * leftY) / Math.sin(Math.PI / 2.0 * axisNonLinearity);
			leftY = Math.sin(Math.PI / 2.0 * axisNonLinearity * leftY) / Math.sin(Math.PI / 2.0 * axisNonLinearity);

			// Smooth the controls on Right side
			rightY = Math.sin(Math.PI / 2.0 * axisNonLinearity * rightY) / Math.sin(Math.PI / 2.0 * axisNonLinearity);
			rightY = Math.sin(Math.PI / 2.0 * axisNonLinearity * rightY) / Math.sin(Math.PI / 2.0 * axisNonLinearity);
		}
*/
		// set the motors
		SetLeftRight(leftY, rightY);
    } 
    
    public void SetLeftRight(double LPower, double RPower){
    	leftDriveTrain1.set(LPower);
    	leftDriveTrain2.set(LPower);
    	rightDriveTrain1.set(RPower);
    	rightDriveTrain2.set(RPower);
    }
    public double getYAxisLeftSide(Joystick stick) {
		return stick.getY();
	}
	public double getYAxisRightSide(Joystick stick) {
		return stick.getThrottle();
	}
	public double handleDeadband(double val, double deadband) {
		return (Math.abs(val) > Math.abs(deadband)) ? val : 0.0;
	}
	boolean isHighGear = false;
	public void SetHighGear() {
		isHighGear = true;
	}
	public void Drive(Joystick stick) {
		// if (!this.EnablePID){
		//cheesyDrive(stick);
		//this.postData();
		tankDrive(stick);
		// }
	}

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    	
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

