// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc841.Waffle.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc841.Waffle.Robot;

/**
 *
 */
public class DriveToDistance extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_Feet;
    private double speed =1;
    private boolean isForward = false;
    private double Kp = 0.01;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveToDistance(double Feet) {
    	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_Feet = Feet;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    /**
     * Main constructor to drive forward and backwards a certain distance
     * @param Feet Feet traveled
     * @param is_forward True if is going forward or false if the distance is backwards
     */
    public DriveToDistance(double Feet, boolean is_forward) 
    {
    	m_Feet = Feet;
        isForward = is_forward;

        requires(Robot.driveTrain);
    }
    

    // Called just before this Command runs the first time
    protected void initialize() {
    	setTimeout(8);
    	Robot.driveTrain.initEncoder();
    	Robot.driveTrain.resetEncoders();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double left, right, errorsum;

		// sample distance traveled
		left = Robot.driveTrain.getleftQuadDistance();
		right = Robot.driveTrain.getrightQuadDistance();

		// P control loop to keep right side the same as left side; therefore,
		// making the robot go straight.
		//errorsum = (left - right) * this.Kp;
		errorsum = 0;
		// limit correction for protection
		if (errorsum > 0.1) {
			errorsum = 0.1;
		} else if (errorsum < -0.1) {
			errorsum = -0.1;
		}

		// Update speed
		if (this.isForward) {
			Robot.driveTrain.SetLeftRight(-this.speed, this.speed + errorsum);
		} else {
			Robot.driveTrain.SetLeftRight(this.speed, -this.speed + errorsum);
		}
		SmartDashboard.putString("DB/String 5" , "Dis: " + Robot.driveTrain.getleftQuadDistance());
	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return (Math.abs(Robot.driveTrain.getrightQuadDistance()) > this.m_Feet)|| isTimedOut();
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.SetLeftRight(0, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
